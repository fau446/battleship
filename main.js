(()=>{"use strict";const e=()=>{const e=(()=>{const e=[];for(let t=0;t<10;t++){const t=[];for(let e=0;e<10;e++){const e={isHit:!1,shipObj:null};t.push(e)}e.push(t)}const t=[];function n(t,n,r,i){let o=n,a=r;if("vertical"===i){if(o+=t-1,o<0||o>9)return!1;o=n;for(let n=0;n<t;n++){if(null!=e[o][r].shipObj)return!1;o+=1}}else if("horizontal"===i){if(a+=t-1,a<0||a>9)return!1;a=r;for(let r=0;r<t;r++){if(null!=e[n][a].shipObj)return!1;a+=1}}return!0}return{get board(){return e},checkCoordinates:n,placeShip:function(r,i,o,a){if(!1===n(r.length,i,o,a))return!1;let l=i,s=o;if("vertical"===a)for(let t=0;t<r.length;t++)e[l][o].shipObj=r,l+=1;else if("horizontal"===a)for(let t=0;t<r.length;t++)e[i][s].shipObj=r,s+=1;return t.push(r),!0},receiveAttack:function(t,n){return!(t>9||t<0||n>9||n<0)&&!e[t][n].isHit&&(e[t][n].isHit=!0,null!=e[t][n].shipObj?(e[t][n].shipObj.hit(),e[t][n].shipObj.sunk?"sink":"hit"):"miss")},checkAllShipsSunk:function(){if(0===t.length)return!1;for(let e=0;e<t.length;e++)if(!1===t[e].sunk)return!1;return!0}}})();function t(e,t,n){return n.gBoard.receiveAttack(e,t)}const n=[];for(let e=0;e<10;e++)for(let t=0;t<10;t++){const r=[];r.push(e),r.push(t),n.push(r)}return{get gBoard(){return e},attack:t,randomAttack:function(e){const r=[Math.floor(Math.random()*n.length)],i=n[r];return n.splice(r,1),t(i[0],i[1],e)}}},t=(e,t=null)=>{let n=0,r=!1;const i=t;return{get length(){return e},get timesHit(){return n},get sunk(){return r},get name(){return i},hit:function(){n+=1,e<=n&&(r=!0)}}};(()=>{const n=(()=>{const n=e(),r=e(),i=[t(5,"Carrier"),t(4,"Battleship"),t(3,"Destroyer"),t(3,"Submarine"),t(2,"Patrol Boat")];let o="horizontal";function a(){return!(!n.gBoard.checkAllShipsSunk()&&!r.gBoard.checkAllShipsSunk())}return function(){const e=[t(5,"Carrier"),t(4,"Battleship"),t(3,"Destroyer"),t(3,"Submarine"),t(2,"Patrol Boat")],n=["horizontal","vertical"];for(let t=0;t<e.length;t++){const i=e[t],o=Math.floor(2*Math.random());!1===r.gBoard.placeShip(i,Math.floor(10*Math.random()),Math.floor(10*Math.random()),n[o])&&t--}}(),{get humanPlayer(){return n},get computerPlayer(){return r},get playerShips(){return i},get placementOrientation(){return o},changePlacementOrientation:function(){o="horizontal"===o?"vertical":"horizontal"},playTurn:function(e,t){const i=n.attack(e,t,r);if(!1===i)return!1;if(a())return[i,null,"humanWin"];const o=r.randomAttack(n);return a()?[i,o,"computerWin"]:[i,o,!1]},gameOver:a,placeShip:function(e,t){return!1!==n.gBoard.placeShip(i[0],e,t,o)&&(i.shift(),!0)}}})(),r=document.querySelectorAll(".board"),i=document.querySelectorAll(".friendly"),o=document.querySelectorAll(".enemy"),a=document.querySelector(".display"),l=document.querySelector(".rotate");function s(){let e=Number(this.parentElement.dataset.row),t=Number(this.dataset.col);const i=n.playerShips[0].length,o=n.placementOrientation;if(!1!==n.humanPlayer.gBoard.checkCoordinates(i,e,t,o))if("horizontal"===o)for(let n=0;n<i;n++)r[0].children[e].children[t].classList.add("hover"),t++;else if("vertical"===o)for(let n=0;n<i;n++)r[0].children[e].children[t].classList.add("hover"),e++}function c(){let e=Number(this.parentElement.dataset.row),t=Number(this.dataset.col);const i=n.playerShips[0].length,o=n.placementOrientation;if(!1!==n.humanPlayer.gBoard.checkCoordinates(i,e,t,o))if("horizontal"===o)for(let n=0;n<i;n++)r[0].children[e].children[t].classList.remove("hover"),t++;else if("vertical"===o)for(let n=0;n<i;n++)r[0].children[e].children[t].classList.remove("hover"),e++}function u(e){e.classList.add("miss")}function h(e){let t=0;e===n.computerPlayer&&(t=1);for(let n=0;n<10;n++)for(let i=0;i<10;i++)0===t&&null!=e.gBoard.board[n][i].shipObj&&r[`${t}`].children[n].children[i].classList.add("player-ship"),!0===e.gBoard.board[n][i].isHit&&null!=e.gBoard.board[n][i].shipObj?(r[`${t}`].children[n].children[i].classList.add("hit"),r[`${t}`].children[n].children[i].classList.remove("player-ship")):!0===e.gBoard.board[n][i].isHit&&u(r[`${t}`].children[n].children[i])}function d(){o.forEach((e=>{e.addEventListener("click",m)}))}function p(e,t){"humanWin"===t?a.innerText="All your opponent's ships have been sunk! You win!":"computerWin"===t&&(a.innerText="All your ship's have been sunk! You lose!"),e===n.humanPlayer?"miss"===t?a.innerText="You missed!":"hit"===t?a.innerText="You hit a ship!":"sink"===t&&(a.innerText="You sunk a ship!"):e===n.computerPlayer&&("miss"===t?a.innerText="Your opponent missed!":"hit"===t?a.innerText="Your opponent hit a ship!":"sink"===t&&(a.innerText="Your opponent sunk a ship!"))}function m(){const e=n.playTurn(Number(this.parentElement.dataset.row),Number(this.dataset.col));!1!==e&&(h(n.computerPlayer),o.forEach((e=>{e.removeEventListener("click",m)})),"humanWin"!==e[2]?(p(n.humanPlayer,e[0]),setTimeout((()=>{h(n.humanPlayer),"computerWin"!==e[2]?(d(),p(n.computerPlayer,e[1])):p(n.computerPlayer,e[2])}),1e3)):p(n.humanPlayer,e[2]))}function f(){const{row:e}=this.parentElement.dataset,{col:t}=this.dataset;if(!1===n.placeShip(Number(e),Number(t)))return void(a.innerText="Invalid placement, please try again!");h(n.humanPlayer);const o=n.playerShips;if(0===o.length)return i.forEach((e=>{e.removeEventListener("click",f),e.removeEventListener("mouseover",s),e.removeEventListener("mouseout",c)})),a.innerText="Click on an enemy tile to attack!",l.classList.add("hide"),void r[1].classList.toggle("hide");a.innerText=`Click on a tile to place your ${o[0].name}.`}l.addEventListener("click",(function(){n.changePlacementOrientation()})),i.forEach((e=>{e.addEventListener("mouseover",s)})),i.forEach((e=>{e.addEventListener("mouseout",c)})),d(),i.forEach((e=>{e.addEventListener("click",f)})),a.innerText=`Click on a tile to place your ${n.playerShips[0].name}.`})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,